Power Of Numbers

Given a number n, find the value of n raised to the power of its own reverse.
Note: The result will always fit into a 32-bit signed integer.

Examples:

Input: n = 2
Output: 4
Explanation: The reverse of 2 is 2, and 22 = 4.
Input: n = 10
Output: 10
Explanation: The reverse of 10 is 1 (leading zero is discarded), and 10 raised to the power 1 is 10.
Constraints:
1 ≤ n ≤ 10

Expected Complexities
Time Complexity: O(log n)
Auxiliary Space: O(log n)


class Solution {

    public int reverseExponentiation(int n) {

        if(n==0 || n==1){
            return 1;
        }
        
        long rev =  reverse(n);
        
        return (int) power(n,rev); 
    }
    
    public static long reverse(int n){
        
        long sum = 0;
        
        while(n>0){
            sum = (sum*10) + n%10;
            n=n/10;
        }
        
        return sum;
    }
    
      long power(long n, long r) {
        if (r == 0)
            return 1;
        long half = power(n, r/2);
        long result = (half * half);
        if (r % 2 != 0)
            result = (result * n);
        return result;
    }
}
